service: sls-ts-api-template
useDotenv: true

plugins:
  - serverless-dynamodb-local
  - serverless-webpack
  - serverless-offline

# Pin the service to only deploy with a specific Serverless version
frameworkVersion: '2'

package:
  individually: true

custom:
  playersTableName: 'players-table-${self:provider.stage}'
  dynamodb:
    stages:
      - '${self:provider.stage}'
    start:
      port: 8008
      convertEmptyValues: true
      heapInitial: 200m
      heapMax: 1G
      inMemory: true
      migrate: true
      seed: true
      sharedDb: true
    seed:
      players:
        sources:
          - table: '${self:custom.playersTableName}'
            sources:
              [
                './dynamodb-offline/seeds/${self:provider.stage}/players-table.json',
              ]
  webpack:
    packager: npm

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  profile: sls-ts-api-template

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        - !Sub '${PlayersDynamoDBTable.Arn}'
        - !Sub '${PlayersDynamoDBTable.Arn}/index/*'
  environment:
    STAGE: ${self:provider.stage}
    # The port that dynamodb is running on when running locally
    DYNAMODB_LOCAL_PORT: ${self:custom.dynamodb.start.port}
    # The name of the DynamoDB table generated by the serverless deployment process.
    PLAYERS_TABLE: ${self:custom.playersTableName}
    # Define the current logging level of the application.
    LOGGING_LEVEL: ${env:LOGGING_LEVEL}
    # API tokens must be a comma separated list
    API_TOKENS: ${env:API_TOKENS}

functions:
  app:
    handler: src/index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    PlayersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.playersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: teamName
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: teamNameIndex
            KeySchema:
              - AttributeName: teamName
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
